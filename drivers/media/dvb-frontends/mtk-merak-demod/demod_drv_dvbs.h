/* SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause) */
/*
 * Copyright (c) 2020 MediaTek Inc.
 */

#ifndef _DRV_DVBS_H_
#define _DRV_DVBS_H_

#include <media/dvb_frontend.h>
#include <linux/dvb/frontend.h>
#ifdef __cplusplus
extern "C"
{
#endif

enum DVBS_Param_2 {
	E_DMD_S2_TS_SERIAL = 0x00,
	E_DMD_S2_TS_CLK_RATE,
	E_DMD_S2_TS_OUT_INV,
	E_DMD_S2_TS_DATA_SWAP,
	//------------------------------------------
	E_DMD_S2_FW_VERSION_L,
	E_DMD_S2_FW_VERSION_H,
	E_DMD_S2_CHIP_VERSION,
	E_DMD_S2_FS_L,//Frequency
	E_DMD_S2_FS_H,//Frequency
	E_DMD_S2_MANUAL_TUNE_SYMBOLRATE_L,
	E_DMD_S2_MANUAL_TUNE_SYMBOLRATE_H,
	E_DMD_S2_SYSTEM_TYPE,//DVBS/S2
	E_DMD_S2_MODULATION_TYPE,//QPSK/8PSK
	E_DMD_S2_BLINDSCAN_CHECK,
	E_DMD_S2_UNCRT_PKT_NUM_7_0,
	E_DMD_S2_UNCRT_PKT_NUM_8_15,
	E_DMD_S2_STATE_FLAG,//0x10
	E_DMD_S2_SUBSTATE_FLAG,
	E_DMD_S2_HUM_DETECT_FLAG,
	E_DMD_S2_CCI_DETECT_FLAG,
	E_DMD_S2_IIS_DETECT_FLAG,
	E_DMD_S2_OPEN_HUM_VLD_IRQ_FLAG,
	E_DMD_S2_SRD_COARSE_DONE_FLAG,
	E_DMD_S2_SRD_FINE_DONE_FLAG,
	E_DMD_S2_FINEFE_DONE_FLAG,
	E_DMD_S2_REV_FRAME_FLAG,
	E_DMD_S2_DUMMY_FRAME_FLAG,
	E_DMD_S2_PLSC_DONE_FLAG,
	E_DMD_S2_GET_INFO_FROM_FRAME_LENGTH_DONE_FLAG,
	E_DMD_S2_IQ_SWAP_DETECT_FLAG,
	E_DMD_S2_FRAME_ACQUISITION_DONE_FLAG,
	E_DMD_S2_OLCFE_DONE_FLAG,
	E_DMD_S2_FSYNC_FOUND_FLAG,//0x20
	E_DMD_S2_FSYNC_FAIL_SEARCH_FLAG,
	E_DMD_S2_FALSE_ALARM_FLAG,
	E_DMD_S2_VITERBI_IN_SYNC_FLAG,
	E_DMD_S2_INT_CODE_RATE_SEARCH_FAIL_FLAG,
	E_DMD_S2_VITERBI_INT_PRE_FLAG,
	E_DMD_S2_BER_WINDOW_END_FLAG,
	E_DMD_S2_PASS_WRONG_INT_FLAG,
	E_DMD_S2_CLK_CNT_OVER_FLAG,
	E_DMD_S2_UNCRT_OVER_FLAG,
	E_DMD_S2_DISEQC_RX_LENGTH,
	E_DMD_S2_DISEQC_INTERRUPT_FLAG,
	E_DMD_S2_DISEQC_RX_FLAG,
	E_DMD_S2_DISEQC_INTERRUPT_STATUS,
	E_DMD_S2_DISEQC_STATUS_FLAG,
	E_DMD_S2_ACI_FIR_SELECTED,
	//LOCK
	E_DMD_S2_AGC_LOCK_FLAG,//0x30
	E_DMD_S2_DCR_LOCK_FLAG,
	E_DMD_S2_DAGC0_LOCK_FLAG,
	E_DMD_S2_DAGC1_LOCK_FLAG,
	E_DMD_S2_DAGC2_LOCK_FLAG,
	E_DMD_S2_DAGC3_LOCK_FLAG,
	E_DMD_S2_TR_LOCK_FLAG,
	E_DMD_S2_CLCFE_LOCK_FLAG,
	E_DMD_S2_EQ_LOCK_FLAG,
	E_DMD_S2_PR_LOCK_FLAG,
	E_DMD_S2_FSYNC_LOCK_FLAG,
	E_DMD_S2_FSYNC_FAIL_LOCK_FLAG,

	E_DMD_S2_MB_SWUSE12L,
	E_DMD_S2_MB_SWUSE12H,
	E_DMD_S2_MB_SWUSE13L,
	E_DMD_S2_MB_SWUSE13H,
	E_DMD_S2_MB_SWUSE14L,//0x40
	E_DMD_S2_MB_SWUSE14H,
	E_DMD_S2_MB_SWUSE15L,
	E_DMD_S2_MB_SWUSE15H,
	E_DMD_S2_MB_SWUSE16L,
	E_DMD_S2_MB_SWUSE16H,
	E_DMD_S2_MB_SWUSE17L,
	E_DMD_S2_MB_SWUSE17H,
	E_DMD_S2_MB_SWUSE18L,
	E_DMD_S2_MB_SWUSE18H,
	E_DMD_S2_MB_SWUSE19L,
	E_DMD_S2_MB_SWUSE19H,
	E_DMD_S2_MB_SWUSE1AL,
	E_DMD_S2_MB_SWUSE1AH,
	E_DMD_S2_MB_SWUSE1BL,
	E_DMD_S2_MB_SWUSE1BH,
	E_DMD_S2_MB_SWUSE1CL,//0x50
	E_DMD_S2_MB_SWUSE1CH,
	E_DMD_S2_MB_SWUSE1DL,
	E_DMD_S2_MB_SWUSE1DH,
	E_DMD_S2_MB_SWUSE1EL,
	E_DMD_S2_MB_SWUSE1EH,
	E_DMD_S2_MB_SWUSE1FL,
	E_DMD_S2_MB_SWUSE1FH,

	E_DMD_S2_MB_DMDTOP_DBG_0,
	E_DMD_S2_MB_DMDTOP_DBG_1,
	E_DMD_S2_MB_DMDTOP_DBG_2,
	E_DMD_S2_MB_DMDTOP_DBG_3,
	E_DMD_S2_MB_DMDTOP_DBG_4,
	E_DMD_S2_MB_DMDTOP_DBG_5,// SYMBOLRATE_H_ADC144
	E_DMD_S2_MB_DMDTOP_DBG_6,
	E_DMD_S2_MB_DMDTOP_DBG_7,
	E_DMD_S2_MB_DMDTOP_DBG_8,//0x60
	E_DMD_S2_MB_DMDTOP_DBG_9,
	E_DMD_S2_MB_DMDTOP_DBG_A,
	E_DMD_S2_MB_DMDTOP_DBG_B,

	E_DMD_S2_MB_DMDTOP_SWUSE00L,
	E_DMD_S2_MB_DMDTOP_SWUSE00H,
	E_DMD_S2_MB_DMDTOP_SWUSE01L,
	E_DMD_S2_MB_DMDTOP_SWUSE01H,
	E_DMD_S2_MB_DMDTOP_SWUSE02L,
	E_DMD_S2_MB_DMDTOP_SWUSE02H,
	E_DMD_S2_MB_DMDTOP_SWUSE03L,
	E_DMD_S2_MB_DMDTOP_SWUSE03H,
	E_DMD_S2_MB_DMDTOP_SWUSE04L,
	E_DMD_S2_MB_DMDTOP_SWUSE04H,
	E_DMD_S2_MB_DMDTOP_SWUSE05L,
	E_DMD_S2_MB_DMDTOP_SWUSE05H,
	E_DMD_S2_MB_DMDTOP_SWUSE06L,//0x70
	E_DMD_S2_MB_DMDTOP_SWUSE06H,
	E_DMD_S2_MB_DMDTOP_SWUSE07L,
	E_DMD_S2_MB_DMDTOP_SWUSE07H,

	E_DMD_S2_MB_TOP_WR_DBG_90,
	E_DMD_S2_MB_TOP_WR_DBG_91,
	E_DMD_S2_MB_TOP_WR_DBG_92,
	E_DMD_S2_MB_TOP_WR_DBG_93,
	E_DMD_S2_MB_TOP_WR_DBG_94,
	E_DMD_S2_MB_TOP_WR_DBG_95,
	E_DMD_S2_MB_TOP_WR_DBG_96,//CFO_Estimated
	E_DMD_S2_MB_TOP_WR_DBG_97,	  //CFO_Estimated
	E_DMD_S2_MB_TOP_WR_DBG_98,	  //DEBUG EMPTY
	E_DMD_S2_MB_TOP_WR_DBG_99,	//DEBUG EMPTY

	E_DMD_S2_MB_DUMMY_REG_0,
	E_DMD_S2_MB_DUMMY_REG_1,
	E_DMD_S2_MB_DUMMY_REG_2,//0x80
	E_DMD_S2_MB_DUMMY_REG_3,
	E_DMD_S2_MB_DUMMY_REG_4,
	E_DMD_S2_MB_DUMMY_REG_5,
	E_DMD_S2_MB_DUMMY_REG_6,
	E_DMD_S2_MB_DUMMY_REG_7,
	E_DMD_S2_MB_DUMMY_REG_8,
	E_DMD_S2_MB_DUMMY_REG_9,
	E_DMD_S2_MB_DUMMY_REG_A,
	E_DMD_S2_MB_DUMMY_REG_B,
	E_DMD_S2_MB_DUMMY_REG_C,
	E_DMD_S2_MB_DUMMY_REG_D,
	E_DMD_S2_MB_DUMMY_REG_E,
	E_DMD_S2_MB_DUMMY_REG_F,
	E_DMD_S2_MB_DUMMY_REG_10,
	E_DMD_S2_MB_DUMMY_REG_11,

	E_DMD_S2_MB_DMDTOP_INFO_01,//0x90
	E_DMD_S2_MB_DMDTOP_INFO_02,
	E_DMD_S2_MB_DMDTOP_INFO_03,
	E_DMD_S2_MB_DMDTOP_INFO_04,
	E_DMD_S2_MB_DMDTOP_INFO_05,
	E_DMD_S2_MB_DMDTOP_INFO_06,
	E_DMD_S2_MB_DMDTOP_INFO_07,
	E_DMD_S2_MB_DMDTOP_INFO_08,

	E_DMD_S2_IDLE_STATE_UPDATED,
	E_DMD_S2_LOG_FLAG,
	E_DMD_S2_LOG_SKIP_INDEX,
	E_DMD_S2_LOCK_COUNT,
	E_DMD_S2_NARROW_STEP_FLAG,
	E_DMD_S2_UNCORRECT_PKT_COUNT,
	E_DMD_S2_DISEQC_INIT_MODE,
	E_DMD_S2_DECIMATE_FORCED,
	E_DMD_S2_SRD_MAX_SRG_FLAG,//0xA0
	E_DMD_S2_DVBS_OUTER_RETRY,

	E_DMD_S2_FORCED_DECIMATE_FLAG,
	E_DMD_S2_NO_SIGNAL_FLAG,
	E_DMD_S2_SPECTRUM_TRACK_FLAG,
	E_DMD_S2_SRD_LOCAL_SEARCH_FLAG,
	E_DMD_S2_NO_SIGNAL_RATIO_CHECK_FLAG,
	E_DMD_S2_LOW_SR_ACI_FLAG,
	E_DMD_S2_SPECTRUM_TRACKER_TIMEOUT,
	E_DMD_S2_TR_TIMEOUT,
	E_DMD_S2_BALANCE_TRACK,
	E_DMD_S2_GAIN_TILT_FLAG,
	E_DMD_S2_SIS_EN,
	E_DMD_S2_ISSY_ACTIVE,
	E_DMD_S2_CODE_RATE,
	E_DMD_S2_PILOT_FLAG,
	E_DMD_S2_FEC_TYPE,//0xB0
	E_DMD_S2_MOD_TYPE,
	E_DMD_S2_VCM_OPT,
	E_DMD_S2_OPPRO_FLAG,
	E_DMD_S2_IS_ID,
	E_DMD_S2_CHECK_EVER_UNLOCK,
	E_DMD_S2_IS_ID_TABLE = 0x100, // use 32bytes length
	DVBS2_PARAM_LEN = 120
};

enum DMD_DVBS_VCM_OPT {
	VCM_Disabled = 0,
	VCM_MODE,
	VCM_Forced_Mode,
	VCM_Set_ISID
};

extern int mdrv_dmd_dvbs_init(struct dvb_frontend *fe);

extern int mdrv_dmd_dvbs_exit(struct dvb_frontend *fe);

extern int mdrv_dmd_dvbs_config(struct dvb_frontend *fe);

extern int mdrv_dmd_dvbs_read_status(struct dvb_frontend *fe,
	enum fe_status *status);

extern int mdrv_dmd_dvbs_get_frontend(struct dvb_frontend *fe,
	struct dtv_frontend_properties *p);

extern  int mdrv_dmd_dvbs_get_ts_rate(u32 *clock_rate);

extern int mdrv_dmd_dvbs_blindScan_start(struct DMD_DVBS_BlindScan_Start_param *Start_param);

extern int mdrv_dmd_dvbs_blindScan_next_freq(
		struct DMD_DVBS_BlindScan_NextFreq_param *NextFreq_param);

extern int mdrv_dmd_dvbs_blindScan_get_tuner_freq(
		struct DMD_DVBS_BlindScan_GetTunerFreq_param *GetTunerFreq_param);

extern int mdrv_dmd_dvbs_blindScan_wait_finished(
		struct DMD_DVBS_BlindScan_WaitCurFreqFinished_param *WaitCurFreqFinished_param);

extern int mdrv_dmd_dvbs_blindScan_get_channel(
		struct DMD_DVBS_BlindScan_GetChannel_param *GetChannel_param);

extern int mdrv_dmd_dvbs_blindScan_cancel(void);

extern int mdrv_dmd_dvbs_blindScan_end(void);

extern int mdrv_dmd_dvbs_blindscan_config(struct dvb_frontend *fe);

extern  int mdrv_dmd_dvbs_diseqc_set_22k(enum fe_sec_tone_mode tone);

extern  int mdrv_dmd_dvbs_diseqc_send_cmd(struct dvb_diseqc_master_cmd *cmd);

extern  int mdrv_dmd_dvbs_diseqc_set_tone(enum fe_sec_mini_cmd minicmd);

extern ssize_t dvbs_get_information_show(struct device_driver *driver,
	char *buf);

extern ssize_t dvbs_get_information(char *buf);

#ifdef __cplusplus
}
#endif

#endif // _DRV_DVBS_H_

